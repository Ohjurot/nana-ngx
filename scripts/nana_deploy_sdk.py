"""
This file will take the output generated by "nana_build_dev.py"
and publishes the output into a ready to used (prebuild) SDK
"""

import os.path
import shutil
import glob

# Pattern for lib sources
P_LIBSOURCE = "./install/full_deploy/host/{lib}/{version}/{conf}/{arch}/*"

if __name__ == "__main__":
    # Check if install is availible
    if not os.path.exists("./install"):
        print("Can't find precompiled nana packages! Please run 'python ./nana_create_dev.py' first!")
        exit()

    # Delete exiting data
    shutil.rmtree("./sdk", ignore_errors=True)

    # Copy all data of the libraries we depend on
    libs = ("libjpeg", "libpng", "zlib", "nana")
    for lib in libs:
        # Find lib  path using glob
        lib_glob = glob.glob(P_LIBSOURCE.format(lib=lib, version="*", conf="Release", arch="*"))
        lib_path = None
        for g in lib_glob:
            if g.endswith("conaninfo.txt"):
                lib_path = g[0:-len("conaninfo.txt")]
        if not lib_path:
            print(f"Can't find '{lib}'!")
            exit()

        # Concat folders "include", "lib", "bin"
        folders = ("include", "lib", "bin")
        for folder in folders:
            copy_src = f"{lib_path}{folder}"
            if os.path.exists(copy_src):
                shutil.copytree(copy_src, f"./sdk/{folder}", dirs_exist_ok=True)

        # Copy license
        os.makedirs("./sdk/licenses/", exist_ok=True)
        license_base = f"{lib_path}licenses/*"
        license_src = glob.glob(license_base)
        for license in license_src:
            nm = license[len(license_base)-1::]
            license_dst = f"./sdk/licenses/{lib}.{nm}"
            shutil.copyfile(license, license_dst)
    
    # Copy nana license
    shutil.copyfile("LICENSE", "./sdk/LICENSE")
